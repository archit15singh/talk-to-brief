[Previous context: ...design with growth in mind. 

What does this mean practically? First, separate your concerns early.]

Even if you start with a monolith, structure it like microservices internally. Use proper layering - controllers, services, data access. This makes it easier to extract services later. Second, think about your data models. That user table with 10 columns? It's going to have 50 columns in two years. Plan for it. Third, and this is crucial - instrument everything from day one. You can't optimize what you can't measure. ## The Database Bottleneck **Alex:** Let's talk about databases. This is where most APIs hit their first major wall. *[Clicks to next slide]* We started with a single PostgreSQL instance. Worked great until it didn't. Our first instinct was to throw more hardware at it. 

Bigger server, more RAM, faster disks. That bought us maybe 3 months. The real solution? Read replicas, connection pooling, and query optimization. But here's the thing - you need to design for this from the beginning. **Audience Member:** What about caching? 