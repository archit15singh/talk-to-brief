[Previous context: ...keaways: 1. Design for observability from day one 2. Separate concerns early, even in a monolith 3.]

Cache strategically, but prepare for cache invalidation complexity 4. Don't go microservices until you have to, but when you do, invest in tooling 5. Security and performance are not afterthoughts - they're architectural decisions ## Q&A Session **Audience Member 1:** What's your take on GraphQL vs REST for scalable APIs? **Alex:** Great question. We actually use both. REST for simple CRUD operations and public APIs, GraphQL for complex data fetching where clients need flexibility. GraphQL can be more efficient for mobile clients, but it adds complexity in caching and security. Choose based on your use case, not hype. **Audience Member 2:** How do you handle API versioning at scale? 